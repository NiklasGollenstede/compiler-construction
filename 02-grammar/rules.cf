comment "//";
comment "/*" "*/";
comment "#";

ProgramInst.Program ::= [Definition];
terminator Definition "";

UsingTypeDef.Definition ::= "using" Type ";";
UsingNamespaceDef.Definition ::= "using" "namespace" NamespaceName ";";
VarDeclDef.Definition ::= VarDecl ";";
TypedefDef.Definition ::= Typedef ";";

FunctionDeclInst.FunctionDecl ::= ConstType Id "(" [ArgumentDecl] ")";
FunctionDeclDef.Definition ::= FunctionDecl ";";
FunctionDef.Definition ::= FunctionDecl Block;
InlineFunctionDeclDef.Definition ::= "inline" FunctionDecl ";";
InlineFunctionDef.Definition ::= "inline" FunctionDecl Block;
separator ArgumentDecl ",";
VariableArgumentDecl.ArgumentDecl ::= ConstType Identifier;
TypeArgumentDecl.ArgumentDecl ::= ConstType;

TypedefInst.Typedef ::= "typedef" Type Identifier;

VarDeclInst.VarDecl ::= ConstType [VarInit] VarInit;
terminator VarDecl ";";
DefaultVarInit.VarInit ::= Identifier;
InitVarInit.VarInit ::= Identifier "=" RValue;
terminator VarInit ",";

StructInst.Struct ::= "struct" Identifier "{" [VarDecl] "}";

BlockInst.Block ::= "{" [Statement] "}";
terminator Statement "";
EmptyStat.Statement ::= ";";
ExpressionStat.Statement ::= RValue ";";
BlockStat.Statement ::= Block;
VarDeclStat.Statement ::= VarDecl ";";
ReturnStat.Statement ::= "return" RValue ";";
ThrowStat.Statement ::= "throw" RValue ";";
TypedefStat.Statement ::= Typedef ";";
IfStat.Statement ::= "if" "(" RValue ")" Statement;
IfElseStat.Statement ::= "if" "(" RValue ")" Statement "else" Statement;
WhileStat.Statement ::= "while" "(" RValue ")" Statement;
DoStat.Statement ::= "do" Statement "while" "(" RValue ")";
ForStat.Statement ::= "for" "(" ConstType [VarInit] VarInit ";" RValue ";" RValue ")" Statement;


VariableLVal.LValue ::= Id;
MemberLVal.LValue ::= Member;

DotMem.Member ::= RValue "." Identifier;
ArrowMem.Member ::= RValue "->" Identifier;
ArrayMem.Member ::= RValue "[" RValue "]";

LValueRVal.RValue ::= LValue;
ConstantRVal.RValue ::= Constant;
StructRVal.RValue ::= Struct;
ParenthesizedRVal.RValue ::= "(" RValue ")";
CallRVal.RValue ::= RValue "(" [FunctionArgument] ")";
separator FunctionArgument ",";
FunctionArgumentInst.FunctionArgument ::= RValue;

AssignOperatorRVal.RValue ::= AssignOperator;
UnaryOperationRVal.RValue ::= UnaryOperation;
BinaryOperationRVal.RValue ::= BinaryOperation;
TrinaryOperationRVal.RValue ::= TrinaryOperation;

SimpleAssOp.AssignOperator ::= LValue "=" RValue;
AddAssOp.AssignOperator ::= LValue "+=" RValue;
SubAssOp.AssignOperator ::= LValue "-=" RValue;
MulAssOp.AssignOperator ::= LValue "*=" RValue;
DivAssOp.AssignOperator ::= LValue "/=" RValue;
ModAssOp.AssignOperator ::= LValue "%=" RValue;
AndAssOp.AssignOperator ::= LValue "&=" RValue;
Or1AssOp.AssignOperator ::= LValue "|=" RValue;

RefUnOp.UnaryOperation ::= "&" RValue;
DeRefUnOp.UnaryOperation ::= "*" RValue;
NotUnOp.UnaryOperation ::= "!" RValue;
InvertUnOp.UnaryOperation ::= "~" RValue;
PreIncUnOp.UnaryOperation ::= "++" RValue;
PostIncUnOp.UnaryOperation ::= RValue "++";
PreDecUnOp.UnaryOperation ::= "--" RValue;
PostDecUnOp.UnaryOperation ::= RValue "--";
PositiveUnOp.UnaryOperation ::= "+" RValue;
NegativeUnOp.UnaryOperation ::= "-" RValue;

CommaBinOp.BinaryOperation ::= RValue "," RValue;
AddBinOp.BinaryOperation ::= RValue "+" RValue;
SubBinOp.BinaryOperation ::= RValue "-" RValue;
MulBinOp.BinaryOperation ::= RValue "*" RValue;
DivBinOp.BinaryOperation ::= RValue "/" RValue;
ModBinOp.BinaryOperation ::= RValue "%" RValue;
LShiftBinOp.BinaryOperation ::= RValue "<<" RValue;
RShiftArithmeticBinOp.BinaryOperation ::= RValue ">>" RValue;
RShiftLogicalBinOp.BinaryOperation ::= RValue ">>>" RValue;
And1BinOp.BinaryOperation ::= RValue "&" RValue;
Or1BinOp.BinaryOperation ::= RValue "|" RValue;
AndBinOp.BinaryOperation ::= RValue "&&" RValue;
OrBinOp.BinaryOperation ::= RValue "||" RValue;
EqBinOp.BinaryOperation ::= RValue "==" RValue;
NotEqBinOp.BinaryOperation ::= RValue "!=" RValue;
GreaterBinOp.BinaryOperation ::= RValue ">" RValue;
GreaterEqBinOp.BinaryOperation ::= RValue ">=" RValue;
LessBinOp.BinaryOperation ::= RValue "<" RValue;
LessEqBinOp.BinaryOperation ::= RValue "<=" RValue;

PlexTriOp.TrinaryOperation ::= RValue "?" RValue ":" RValue;


IdInst.Id ::= [TypeSegment] Identifier;

SimpleType.Type ::= BuildInType;
ScopedType.Type ::= [TypeSegment] TypeSegment;
terminator TypeSegment "::";
IdentifierCT.TypeSegment ::= Identifier;
TemplatedCT.TypeSegment ::= Identifier "<" [TemplateArgument] TemplateArgument ">";
terminator TemplateArgument ",";
RValTemplateArgument.TemplateArgument ::= Constant;
TypeTemplateArgument.TemplateArgument ::= ConstType;

ReferenceType.Type ::= Type "&";
PointerType.Type ::= Type "*";
NotConstType.ConstType ::= Type;
ConstConstType.ConstType ::= "const" Type;

NamespaceNameInit.NamespaceName ::= Id;

IntBI.BuildInType ::= "int";
BoolBI.BuildInType ::= "bool";
DoubleBI.BuildInType ::= "double";
VoidBI.BuildInType ::= "void";
LongBI.BuildInType ::= "long";
LongLongBI.BuildInType ::= "long" "long";

IntConst.Constant ::= Integer;
StringConst.Constant ::= [String] String;
separator String "";
DoubleConst.Constant ::= Double;
CharConst.Constant ::= Char;
TrueConst.Constant ::= "true";
FalseConst.Constant ::= "false";

token Identifier (letter(letter|digit|'_')*)
