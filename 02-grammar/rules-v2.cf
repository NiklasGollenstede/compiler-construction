entrypoints Program;
IProgram.Program ::= [Def];
separator Def "";

// Function definitions.
separator Stmt "";
separator ArgDecl ",";
FunDef.Def           ::= Typename Identifier "(" [ArgDecl] ")" FunBody;
InlFunDef.Def        ::= "inline" Typename Identifier "(" [ArgDecl] ")" FunBody;
EmptyFunBody.FunBody ::= ";";
IFunBody.FunBody     ::= "{" [Stmt] "}";

// Typedefs.
TypedefDef.Def ::= Typedef;

// Using imports.
UsingDef.Def ::= "using" QualIdent ";";

// Struct definition.
StructDef.Def ::= Struct;

// Var declaration definition.
VarDeclDef.Def ::= VarDecl;

// Function arguments.
PrimitiveArgDecl.ArgDecl ::= Typename ArgSpec;
EmptyArgSpec.ArgSpec ::= ;
IArgSpec.ArgSpec ::= Identifier ArgDefaultSpec;
EmptyArgDefaultSpec.ArgDefaultSpec ::= ;
IArgDefaultSpec.ArgDefaultSpec ::= "=" Expr;

// Typenames.
separator nonempty Typename ",";
ConstTypename.Typename      ::= "const" Typename1;
ReferenceTypename.Typename1 ::= Typename2 "&";
PointerTypename.Typename1   ::= Typename2 "*";
PrimitiveTypename.Typename2 ::= BuiltinPrimitive;
UserTypename.Typename2      ::= QualIdent;
coercions Typename 2; 

// Typedef statement.
ITypedef.Typedef ::= "typedef" Typename Identifier ";";

// Struct definition.
separator VarDecl "";
IStruct.Struct ::= "struct" Identifier "{" [VarDecl] "}" ";";

// Variable declarations.
separator nonempty VarDeclInit ",";
IVarDecl.VarDecl                 ::= Typename [VarDeclInit] ";";
IVarDeclInit.VarDeclInit         ::= Identifier;
InitVarDeclInit.VarDeclInit      ::= Identifier "=" VarInitVal;
ExprVarInitVal.VarInitVal     ::= Expr;

// Statements.
NopStmt.Stmt ::= ";";
BlockStmt.Stmt ::= "{" [Stmt] "}";
VarDeclStmt.Stmt ::= VarDecl;
ExprStmt.Stmt ::= Expr ";";
ReturnStmt.Stmt ::= "return" Expr ";";
WhileStmt.Stmt ::= "while" "(" Expr ")" Stmt;
DoWhileStmt.Stmt ::= "do" Stmt "while" "(" Expr ")" ";";
ForStmt.Stmt ::= "for" "(" VarDecl Expr ";" Expr ")" Stmt;
IfStmt.Stmt ::= "if" "(" Expr ")" Stmt;
IfElseStmt.Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt;
StructStmt.Stmt ::= Struct;
TypedefStmt.Stmt ::= Typedef;

// Expressions.
separator Expr ",";
LiteralExpr.Expr12 ::= Literal;

VarExpr.Expr11 ::= QualIdent;
IndexingExpr.Expr11 ::= Expr "[" Expr "]";
CallExpr.Expr11 ::= Expr "(" [Expr] ")";

DotAccExpr.Expr10 ::= Expr "." Identifier;
ArrAccExpr.Expr10 ::= Expr "->" Identifier;
DerefExpr.Expr10 ::= "*" Expr;
PostIncExpr.Expr10 ::= Expr "++";
PostDecExpr.Expr10 ::= Expr "--";

PreIncExpr.Expr9 ::= "++" Expr;
PreDecExpr.Expr9 ::= "--" Expr;
NegateExpr.Expr9 ::= "!" Expr;

MulExpr.Expr8 ::= Expr "*" Expr;
DivExpr.Expr8 ::= Expr "/" Expr;
ModExpr.Expr8 ::= Expr "%" Expr;

AddExpr.Expr7 ::= Expr "+" Expr;
SubExpr.Expr7 ::= Expr "-" Expr;

LShiftExpr.Expr6 ::= Expr "<<" Expr;
RShiftExpr.Expr6 ::= Expr ">>" Expr;

LessExpr.Expr5 ::= Expr "<" Expr;
GreaterExpr.Expr5 ::= Expr ">" Expr;
LeqExpr.Expr5 ::= Expr "<=" Expr;
GeqExpr.Expr5 ::= Expr ">=" Expr;
EqExpr.Expr5 ::= Expr "==" Expr;
NeqExpr.Expr5 ::= Expr "!=" Expr;

AndExpr.Expr4 ::= Expr "&&" Expr;

OrExpr.Expr3 ::= Expr "||" Expr;

AssExpr.Expr2 ::= Expr "=" Expr;
AddAssExpr.Expr2 ::= Expr "+=" Expr;
SubAssExpr.Expr2 ::= Expr "-=" Expr;

CondExpr.Expr1 ::= Expr "?" Expr ":" Expr;

ThrowExpr.Expr ::= "throw" Expr;

coercions Expr 12;

// ------------------------------------------------------------------
// Literal values.
// ------------------------------------------------------------------
separator String "";
IntLiteral    .Literal ::= Integer;
StringLiteral .Literal ::= [String] String;
CharLiteral   .Literal ::= Char;
DoubleLiteral .Literal ::= Double;
TrueLiteral   .Literal ::= "true";
FalseLiteral  .Literal ::= "false";
// ------------------------------------------------------------------

// Qualified ids.
FinQualIdent.QualIdent ::= TrailQualIdent;
NestQualIdent.QualIdent ::= Identifier "::" QualIdent;
TemplQualIdent.QualIdent ::= Identifier "<" [Typename] ">" "::" QualIdent;
ITrailQualIdent.TrailQualIdent ::= Identifier;
TemplTrailQualIdent.TrailQualIdent ::= Identifier "<" [Typename] ">";

// ------------------------------------------------------------------
// Builtin primitive types.
// ------------------------------------------------------------------
BoolPrimitiveDatatype   .BuiltinPrimitive ::= "bool";
DoublePrimitiveDatatype .BuiltinPrimitive ::= "double";
IntPrimitiveDatatype    .BuiltinPrimitive ::= "int";
VoidPrimitiveDatatype   .BuiltinPrimitive ::= "void";
// ------------------------------------------------------------------



// ------------------------------------------------------------------
// General identifier structure.
// ------------------------------------------------------------------
token Identifier (letter(letter|digit|'_')*);
// ------------------------------------------------------------------



// Ignore.
comment "//";
comment "/*" "*/";
comment "#";
