entrypoints Program;
IProgram.Program ::= [Def];
separator Def "";

// Function definitions.
separator Stmt "";
separator ArgDecl ",";
FunDef.Def           ::= Typename Identifier "(" [ArgDecl] ")" FunBody;
InlFunDef.Def        ::= "inline" Typename Identifier "(" [ArgDecl] ")" FunBody;
EmptyFunBody.FunBody ::= ";";
IFunBody.FunBody     ::= "{" [Stmt] "}";

// Typedefs.
TypedefDef.Def ::= Typedef;

// Using imports.
UsingDef.Def ::= "using" QualIdent ";";

// Struct definition.
StructDef.Def ::= Struct;

// Var declaration definition.
VarDeclDef.Def ::= VarDecl;

// Function arguments.
PrimitiveArgDecl.ArgDecl ::= Typename ArgSpec;
EmptyArgSpec.ArgSpec ::= ;
IArgSpec.ArgSpec ::= Identifier ArgDefaultSpec;
EmptyArgDefaultSpec.ArgDefaultSpec ::= ;
IArgDefaultSpec.ArgDefaultSpec ::= "=" Expr;

// Typenames.
separator nonempty Typename ",";
ReferenceTypename.Typename  ::= Typename "&";
PrimitiveTypename.Typename  ::= BuiltinPrimitive;
ConstPrimitiveTypename.Typename ::= "const" BuiltinPrimitive;
UserTypename.Typename       ::= QualIdent;
ConstUserTypename.Typename  ::= "const" QualIdent;

// Typedef statement.
ITypedef.Typedef ::= "typedef" Typename Identifier ";";

// Struct definition.
separator VarDecl "";
IStruct.Struct ::= "struct" Identifier "{" [VarDecl] "}" ";";

// Variable declarations.
separator nonempty VarDeclInit ",";
IVarDecl.VarDecl                 ::= Typename [VarDeclInit] ";";
IVarDeclInit.VarDeclInit         ::= Identifier;
InitVarDeclInit.VarDeclInit      ::= Identifier "=" Expr;

// Statements.
NopStmt.Stmt ::= ";";
BlockStmt.Stmt ::= "{" [Stmt] "}";
VarDeclStmt.Stmt ::= VarDecl;
ExprStmt.Stmt ::= Expr ";";
ReturnStmt.Stmt ::= "return" Expr ";";
WhileStmt.Stmt ::= "while" "(" Expr ")" Stmt;
DoWhileStmt.Stmt ::= "do" Stmt "while" "(" Expr ")" ";";
ForStmt.Stmt ::= "for" "(" VarDecl Expr ";" Expr ")" Stmt;
IfStmt.Stmt ::= "if" "(" Expr ")" Stmt;
IfElseStmt.Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt;
StructStmt.Stmt ::= Struct;
TypedefStmt.Stmt ::= Typedef;

// Expressions.
separator Expr2 ",";

ThrowExpr.Expr1    ::= "throw" Expr2;
AssignExpr.Expr2   ::= Expr15 AssignOperator Expr2;
TernaryExpr.Expr3  ::= Expr4 "?" Expr ":" Expr3;
OrExpr.Expr4       ::= Expr4 "||" Expr5;
AndExpr.Expr5      ::= Expr5 "&&" Expr6;
EqExpr.Expr9       ::= Expr9 "==" Expr10;
NeqExpr.Expr9      ::= Expr9 "!=" Expr10;
LThanExpr.Expr10   ::= Expr10 "<" Expr11;
GThanExpr.Expr10   ::= Expr10 ">" Expr11;
LEqExpr.Expr10     ::= Expr10 "<=" Expr11;
GEqExpr.Expr10     ::= Expr10 ">=" Expr11;
LShiftExpr.Expr11  ::= Expr11 "<<" Expr12;
RShiftExpr.Expr11  ::= Expr11 ">>" Expr12;
AddExpr.Expr12     ::= Expr12 "+" Expr13;
SubExpr.Expr12     ::= Expr12 "-" Expr13;
MulExpr.Expr13     ::= Expr13 "*" Expr14;
DivExpr.Expr13     ::= Expr13 "/" Expr14;
ModExpr.Expr13     ::= Expr13 "%" Expr14;
PreIncExpr.Expr15  ::= "++" Expr15;
PreDecExpr.Expr15  ::= "--" Expr15;
UnaryOpExpr.Expr15 ::= UnaryOperator Expr14;
IndexExpr.Expr16   ::= Expr16 "[" Expr "]" ;
CallExpr.Expr16    ::= Expr16 "(" [Expr2] ")";
DotAccExpr.Expr16  ::= Expr16 "." Identifier;
ArrAccExpr.Expr16  ::= Expr16 "->" Identifier;
PostIncExpr.Expr16 ::= Expr16 "++";
PostDecExpr.Expr16 ::= Expr16 "--";
//VarExpr.Expr17     ::= Typename;
VarExpr.Expr17     ::= QualIdent;
LiteralExpr.Expr17 ::= Literal;

coercions Expr 17;

IAssignOperator   .AssignOperator ::= "=";
AddAssignOperator .AssignOperator ::= "+=";
SubAssignOperator .AssignOperator ::= "-=";
MulAssignOperator .AssignOperator ::= "*=";
DivAssignOperator .AssignOperator ::= "/=";
ModAssignOperator .AssignOperator ::= "%=";

DerefUnaryOperator  .UnaryOperator ::= "*";
NegateUnaryOperator .UnaryOperator ::= "!";

// ------------------------------------------------------------------
// Literal values.
// ------------------------------------------------------------------
separator nonempty String "";
IntLiteral    .Literal ::= Integer;
StringLiteral .Literal ::= [String];
CharLiteral   .Literal ::= Char;
DoubleLiteral .Literal ::= Double;
TrueLiteral   .Literal ::= "true";
FalseLiteral  .Literal ::= "false";
// ------------------------------------------------------------------

// Qualified ids.
separator nonempty QualIdentItem "::";
IQualIdent.QualIdent             ::= [QualIdentItem];
IdentQualIdentItem.QualIdentItem ::= Identifier;
TemplQualIdentItem.QualIdentItem ::= Identifier "<" [Typename] ">";

// ------------------------------------------------------------------
// Builtin primitive types.
// ------------------------------------------------------------------
BoolPrimitiveDatatype   .BuiltinPrimitive ::= "bool";
DoublePrimitiveDatatype .BuiltinPrimitive ::= "double";
IntPrimitiveDatatype    .BuiltinPrimitive ::= "int";
VoidPrimitiveDatatype   .BuiltinPrimitive ::= "void";
// ------------------------------------------------------------------



// ------------------------------------------------------------------
// General identifier structure.
// ------------------------------------------------------------------
token Identifier (letter(letter|digit|'_')*);
// ------------------------------------------------------------------



// Ignore.
comment "//";
comment "/*" "*/";
comment "#";
